cell_ids = [147];%Inputweekend = 0;numdays = 4;trainDays = 3;numZones = 3;% Construct distance matrix between cells% columns are cellid, centroid_x, centroid_y, etccelldata = csvread('cell_info_2.0km_priority.csv',2,0);numCells = length(celldata);distance = zeros(numCells);for i = 1:numCells    for j = 1:numCells        if i == j            distance(i,j) = 10000;        else            distance(i,j) = sqrt((celldata(i,2)-celldata(j,2))^2 + (celldata(i,3) - celldata(j,3))^2);        end       endendfor q = 1:length(cell_ids)    cell_id = cell_ids(q);        dow = [];    x_spatial = [];    x_temporal = [];    y = [];    numRec = [];    % Retrieve indexes of the nearest numZones cells    minIndex = zeros(numCells,numZones);    for i = 1:numCells        [~,d] = sort(distance(i,:));        minIndex(i,:) = d(1:numZones);    end    neighbourcell = minIndex(cell_id,:);    coordx = celldata(cell_id,2);    coordy = celldata(cell_id,3);    for i = 1:numZones        coordx = [coordx;celldata(neighbourcell(i),2)];        coordy = [coordy;celldata(neighbourcell(i),3)];    end            % Read in Data    for date = 1:numdays        if (date < 10)             d = strcat('0',num2str(date));        else            d = num2str(date);        end                % columns are cell_id,time_id,start_time,end_time,num_traj,inflow,outflow,avg_traveldist_km,avg_traveltime_min,avg_speed_kph        data = csvread(strcat('node_measures_2km_30min_5min_201603',d,'.csv'),2,1);                % Take out weekends (optional depending on needs)    %    if weekday(strcat('2016-03-',d)) == 1 || weekday(strcat('2016-03-',d)) == 7    %        weekend = weekend + 1;    %        continue    %    end            dayPoints = [];                % Get information of the interested cell        datatarget = data(data(:,1) == cell_id,:);        numPoints = length(datatarget);        y = [y; datatarget(:,5)];        x_temporal = [x_temporal; datatarget(:,3)+283*(date-1)];        x_spatial = [x_spatial; repmat(coordx(1),numPoints,1) repmat(coordy(1),numPoints,1)];        dayPoints = [dayPoints numPoints];                % Call GetTrajs to get the flows of the neighbouring cells        for i = 1:numZones            dataneighbour = data(data(:,1) == neighbourcell(i),:);            numPoints = length(dataneighbour);            y = [y;dataneighbour(:,5)];            x_temporal = [x_temporal; dataneighbour(:,3)+283*(date-1)];            x_spatial = [x_spatial; repmat(coordx(i+1),numPoints,1) repmat(coordy(i+1),numPoints,1)];            dayPoints = [dayPoints numPoints];        end                 numRec = [numRec; dayPoints];            end    % Take out weekends (optional)    %numdays = numdays - weekend;    x = [x_spatial x_temporal];    x = Normalize(x);    xtrain = x(1:sum(numRec(1:trainDays,:)(:)),:);    ytrain = y(1:sum(numRec(1:trainDays,:)(:)));    meanfunc = {};    covfunc = {@covProd,{{@covMask,{[1 1 0],@covSEiso}},{@covMask,{[0 0 1],{'covProd',{'covPeriodic',{'covProd',{'covRQiso','covPeriodic'}}}}}}}};    likfunc = @likGauss;    hyp = struct('mean',[],'cov', [0 0 0 0 0 0 0 0 0 0 0], 'lik', -1);    hyp2 = minimize(hyp, @gp, -100, @infExact, meanfunc, covfunc, likfunc, xtrain, ytrain);    % Predict and Plot    plotdays = linspace(trainDays, numdays, numdays-trainDays); % the dates to predict    for i = 1:length(plotdays)        xtest = x(sum(numRec(1:plotdays(i)-1,:)(:))+1:sum(numRec(1:plotdays(i),:)(:)), :);        ytest = y(sum(numRec(1:plotdays(i)-1,:)(:))+1:sum(numRec(1:plotdays(i),:)(:)));                [mu, s2] = gp(hyp2, @infExact, meanfunc, covfunc, likfunc, xtrain, ytrain, xtest);                numPoints = numRec(plotdays(i),1);        fig = figure;        plot(xtest(1:numPoints, 3), ytest(1:numPoints),'b', 'LineWidth',2);        hold on;        plot(xtest(1:numPoints, 3), mu(1:numPoints),'r');        legend('Actual Flow', 'Prediction');        hold off;        saveas(fig, strcat('03-',num2str(plotdays(i)),'-',num2str(cell_id),'-orig.png'));    endend